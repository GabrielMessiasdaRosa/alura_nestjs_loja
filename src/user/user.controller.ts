import { Body, Controller, Delete, Get, Param, Post } from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
import { ListUserDto } from './dto/list-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { UserService } from './user.service';
@Controller('/users') // ðŸ‘ˆ Route path @Controller is a decorator that defines a controller that will handle requests for a specific route path.
export class UserController {
  /*  private userService = new UserService(); */ // ðŸ‘ˆ Create an instance of the UserService class
  constructor(private userService: UserService) {} // ðŸ‘ˆ Dependency injection in the constructor to inject the UserService instance into the UserController class.

  @Get()
  async listUsers() {
    try {
      // ðŸ‘ˆ Route handler method that calls the listUsers method of the UserService class
      const users: ListUserDto[] = await this.userService.listUsers();
      return users;
    } catch (error) {
      return error;
    }
  }

  @Get(':id')
  async getUser(@Param('id') id: string): Promise<ListUserDto> {
    // ðŸ‘ˆ Route handler method that calls the getUser method of the UserService class
    try {
      const user: ListUserDto = await this.userService.getUser(id);
      return user;
    } catch (error) {
      return error;
    }
  }

  @Post()
  async createUser(@Body() body: CreateUserDto) {
    try {
      await this.userService.createUser(body);
      return {
        message: `${body.name} created successfully`,
      };
    } catch (error) {
      return error;
    }
  }

  @Post(':id')
  async updateUser(@Param('id') id: string, @Body() body: UpdateUserDto) {
    try {
      await this.userService.updateUser(id, body);
      return {
        message: `${body.name} updated successfully`,
      };
    } catch (error) {
      return error;
    }
  }

  @Delete(':id')
  async deleteUser(@Param('id') id: string) {
    try {
      await this.userService.deleteUser(id);
      return {
        message: `User deleted successfully`,
      };
    } catch (error) {
      return error;
    }
  }

  /*  @Post() // ðŸ‘ˆ Route handler @Post is a decorator that defines a route handler for POST requests to the route path defined by the @Controller decorator.
  async createUser(@Body() body: CreateUserDto) {
    // ðŸ‘ˆ Route handler method that accepts a CreateUserDto object as the request body.
    // create user
    const userEntity = new UserEntity(); // ðŸ‘ˆ Create an instance of the UserEntity class

    userEntity.name = body.name; // ðŸ‘ˆ Set the name property of the userEntity object to the name property of the CreateUserDto object
    userEntity.email = body.email; // ðŸ‘ˆ Set the email property of the userEntity object to the email property of the CreateUserDto object
    userEntity.password = body.password; // ðŸ‘ˆ Set the password property of the userEntity object to the password property of the CreateUserDto object
    userEntity.id = uuid(); // ðŸ‘ˆ Set the id property of the userEntity object to a unique id generated by the uuid package

    this.userService.createUser(userEntity);
    return {
      // ðŸ‘ˆ return user object;
      user: new ListUserDto(userEntity.id, userEntity.name), // ðŸ‘ˆ return a new ListUserDto object with the id and name properties of the userEntity object
      message: 'User created successfully',
    };
  }

  @Get() // ðŸ‘ˆ Route handler @Get is a decorator that defines a route handler for GET requests to the route path defined by the @Controller decorator.
  async getUsers() {
    const savedUsers = await this.userService.getUsers(); // ðŸ‘ˆ Call the getUsers method of the UserService class and assign the result to the savedUsers variable
    const users = savedUsers.map((user) => {
      // ðŸ‘ˆ Map the savedUsers array to a new array of objects with only the id and name properties
      return new ListUserDto(user.id, user.name);
    });
    return users; // ðŸ‘ˆ return users array
  }

  @Put('/:id') // ðŸ‘ˆ Route handler @Put is a decorator that defines a route handler for PUT requests to the route path defined by the @Controller decorator.
  async updateUser(@Body() body: UpdateUserDto, @Param('id') id: string) {
    // ðŸ‘ˆ Route handler method that accepts a UpdateUserDto object as the request body and the id parameter from the route path.
    const updatedUser = await this.userService.updateUser(id, body);

    return {
      user: new ListUserDto(updatedUser.id, updatedUser.name),
      message: 'User updated successfully',
    };
  }

  @Delete('/:id') // ðŸ‘ˆ Route handler @Delete is a decorator that defines a route handler for DELETE requests to the route path defined by the @Controller decorator.
  async deleteUser(@Param('id') id: string) {
    // ðŸ‘ˆ Route handler method that accepts the id parameter from the route path.
    await this.userService.deleteUser(id);
    return {
      message: 'User deleted successfully',
    };
  } */
}
