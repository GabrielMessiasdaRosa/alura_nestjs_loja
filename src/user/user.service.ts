import { Injectable } from "@nestjs/common";
import { UserEntity } from "./user.entity";

@Injectable() // ğŸ‘ˆ Injectable decorator is a class decorator that defines a service, a service is a class that contains business logic and is instantiated within a module.
export class UserService {
    private users: UserEntity[] = []; // ğŸ‘ˆ users array memory storage

    async createUser(user: UserEntity) { // ğŸ‘ˆ createUser method that accepts name, email, and password
        this.users.push(user); // ğŸ‘ˆ push user object to users array, this will be replaced with a database call in the next chapter
    }

    async getUsers() { // ğŸ‘ˆ getUsers method
        return this.users; // ğŸ‘ˆ return users array
    }

    async emailAlreadyExists(email: UserEntity["email"]) { // ğŸ‘ˆ emailAlreadyExists method
        return this.users.some(user => user.email === email); // ğŸ‘ˆ return true if email exists in users array
    }

    async updateUser(id: string, user: Partial<UserEntity>) { // ğŸ‘ˆ updateUser method
        const userIndex = this.users.findIndex(user => user.id === id); // ğŸ‘ˆ find index of user with id
        this.users[userIndex] = { ...this.users[userIndex], ...user }; // ğŸ‘ˆ update user object with new user object
        return this.users[userIndex]; // ğŸ‘ˆ return updated user object

    }

    async deleteUser(id: string) { // ğŸ‘ˆ deleteUser method
        return this.users = this.users.filter(user => user.id !== id); // ğŸ‘ˆ filter out user with id
    }

}